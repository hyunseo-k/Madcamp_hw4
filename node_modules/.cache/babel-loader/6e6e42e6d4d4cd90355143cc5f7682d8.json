{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\(S)samsungFLEX5\\\\Desktop\\\\hw4_login\\\\src\\\\pages\\\\game\\\\components\\\\Drawboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { fabric } from 'fabric';\nimport { MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardHeader, MDBCardBody, MDBIcon, MDBTextArea, MDBBtn } from \"mdb-react-ui-kit\";\nimport \"./Drawboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colorPalette = ['#000000', '#FF0000', '#00FF00', '#183EFA', '#FFFF00', '#E94097', '#79EDFF', '#FFFFFF'];\n\nconst Drawboard = () => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const fabricCanvasRef = useRef(null);\n  const drawingToolRef = useRef(null);\n  const [isErasing, setIsErasing] = useState(false);\n  const [currentColor, setCurrentColor] = useState(colorPalette[0]);\n  const [brushWidth, setBrushWidth] = useState(2); // Default brush width\n\n  useEffect(() => {\n    const canvas = new fabric.Canvas(canvasRef.current, {\n      width: 500,\n      height: 500,\n      backgroundColor: '#ffffff' // Set your desired canvas background color\n\n    });\n    fabricCanvasRef.current = canvas;\n    return () => {\n      // Clean up the Fabric.js canvas instance on unmount\n      canvas.dispose();\n    };\n  }, []);\n  useEffect(() => {\n    // Apply the new color to the canvas whenever the currentColor changes\n    const canvas = fabricCanvasRef.current;\n    canvas.freeDrawingBrush.color = currentColor;\n    canvas.freeDrawingBrush.width = brushWidth;\n  }, [currentColor, brushWidth]);\n\n  const onMouseDown = event => {\n    if (drawingToolRef.current && drawingToolRef.current.onMouseDown) {\n      drawingToolRef.current.onMouseDown(event);\n    }\n  };\n\n  const onMouseMove = event => {\n    if (drawingToolRef.current && drawingToolRef.current.onMouseMove) {\n      drawingToolRef.current.onMouseMove(event);\n    }\n  };\n\n  const onMouseUp = event => {\n    if (drawingToolRef.current && drawingToolRef.current.onMouseUp) {\n      drawingToolRef.current.onMouseUp(event);\n    }\n  };\n\n  useEffect(() => {\n    const canvas = fabricCanvasRef.current; // Event handlers for mouse events\n\n    canvas.on('mouse:down', onMouseDown);\n    canvas.on('mouse:move', onMouseMove);\n    canvas.on('mouse:up', onMouseUp);\n    return () => {\n      // Remove the event listeners on unmount\n      canvas.off('mouse:down', onMouseDown);\n      canvas.off('mouse:move', onMouseMove);\n      canvas.off('mouse:up', onMouseUp);\n    };\n  }, []);\n\n  const setDrawingTool = tool => {\n    drawingToolRef.current = tool;\n  };\n\n  const enableFreeDrawing = () => {\n    const canvas = fabricCanvasRef.current;\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.width = brushWidth;\n\n    if (isErasing) {\n      canvas.freeDrawingBrush.color = '#ffffff'; // Set the brush color to white for erasing effect\n\n      canvas.freeDrawingBrush.backgroundColor = '#ffffff'; // Set the background color to white for erasing effect\n\n      canvas.isDrawingMode = true; // Enable drawing mode for erasing\n    } else {\n      canvas.freeDrawingBrush.color = currentColor; // Set the brush color to the selected color for drawing\n\n      canvas.freeDrawingBrush.backgroundColor = 'transparent'; // Set the background color to transparent for drawing\n\n      canvas.isDrawingMode = true; // Enable drawing mode\n    }\n  };\n\n  const handleColorChange = color => {\n    setCurrentColor(color);\n    setIsErasing(false); // Disable eraser when a color is selected\n  };\n\n  const toggleEraser = () => {\n    setIsErasing(prev => !prev);\n  };\n\n  const handleBrushWidthChange = event => {\n    const width = parseInt(event.target.value);\n    setBrushWidth(width);\n  };\n\n  const clearCanvas = () => {\n    const canvas = fabricCanvasRef.current;\n    const objects = canvas.getObjects(); // Remove all foreground objects, leaving the background color intact\n\n    objects.forEach(object => {\n      if (object !== canvas.backgroundImage) {\n        canvas.remove(object);\n      }\n    });\n    canvas.renderAll(); // Re-render the canvas after clearing\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          width: '500px',\n          height: '500px',\n          border: '1px solid #ccc'\n          /* Add any other desired styles for the canvas here */\n\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uC120 \\uC0C9\\uC0C1:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), colorPalette.map(color => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: color,\n          width: '30px',\n          height: '30px',\n          margin: '5px'\n        },\n        onClick: () => handleColorChange(color)\n      }, color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(MDBBtn, {\n        onClick: enableFreeDrawing,\n        id: \"form\",\n        className: \"w-100 mb-4 btn custom-btn\",\n        size: \"md\",\n        style: {\n          fontSize: '18px'\n        },\n        children: \"\\uADF8\\uB9AC\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uC120 \\uAD75\\uAE30: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"10\",\n        value: brushWidth,\n        onChange: handleBrushWidthChange,\n        style: {\n          width: '100px',\n          margin: '5px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: brushWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        children: \"\\uC804\\uCCB4 \\uC9C0\\uC6B0\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Drawboard, \"GH/S438Cy8XE5tlermCh/Iej8sQ=\");\n\n_c = Drawboard;\nexport default Drawboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Drawboard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","fabric","MDBContainer","MDBRow","MDBCol","MDBCard","MDBCardHeader","MDBCardBody","MDBIcon","MDBTextArea","MDBBtn","colorPalette","Drawboard","canvasRef","fabricCanvasRef","drawingToolRef","isErasing","setIsErasing","currentColor","setCurrentColor","brushWidth","setBrushWidth","canvas","Canvas","current","width","height","backgroundColor","dispose","freeDrawingBrush","color","onMouseDown","event","onMouseMove","onMouseUp","on","off","setDrawingTool","tool","enableFreeDrawing","isDrawingMode","handleColorChange","toggleEraser","prev","handleBrushWidthChange","parseInt","target","value","clearCanvas","objects","getObjects","forEach","object","backgroundImage","remove","renderAll","border","map","margin","fontSize"],"sources":["C:/Users/(S)samsungFLEX5/Desktop/hw4_login/src/pages/game/components/Drawboard.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { fabric } from 'fabric';\r\nimport {\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBCard,\r\n  MDBCardHeader,\r\n  MDBCardBody,\r\n  MDBIcon,\r\n  MDBTextArea,\r\n  MDBBtn\r\n} from \"mdb-react-ui-kit\";\r\n\r\nimport \"./Drawboard.css\"\r\n\r\nconst colorPalette = ['#000000', '#FF0000', '#00FF00', '#183EFA', '#FFFF00', '#E94097', '#79EDFF', '#FFFFFF'];\r\n\r\nconst Drawboard = () => {\r\n  const canvasRef = useRef(null);\r\n  const fabricCanvasRef = useRef(null);\r\n  const drawingToolRef = useRef(null);\r\n  const [isErasing, setIsErasing] = useState(false);\r\n  const [currentColor, setCurrentColor] = useState(colorPalette[0]);\r\n  const [brushWidth, setBrushWidth] = useState(2); // Default brush width\r\n\r\n  useEffect(() => {\r\n    const canvas = new fabric.Canvas(canvasRef.current, {\r\n      width: 500,\r\n      height: 500,\r\n      backgroundColor: '#ffffff', // Set your desired canvas background color\r\n    });\r\n\r\n    fabricCanvasRef.current = canvas;\r\n\r\n    return () => {\r\n      // Clean up the Fabric.js canvas instance on unmount\r\n      canvas.dispose();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Apply the new color to the canvas whenever the currentColor changes\r\n    const canvas = fabricCanvasRef.current;\r\n    canvas.freeDrawingBrush.color = currentColor;\r\n    canvas.freeDrawingBrush.width = brushWidth;\r\n  }, [currentColor, brushWidth]);\r\n\r\n  const onMouseDown = (event) => {\r\n    if (drawingToolRef.current && drawingToolRef.current.onMouseDown) {\r\n      drawingToolRef.current.onMouseDown(event);\r\n    }\r\n  };\r\n\r\n  const onMouseMove = (event) => {\r\n    if (drawingToolRef.current && drawingToolRef.current.onMouseMove) {\r\n      drawingToolRef.current.onMouseMove(event);\r\n    }\r\n  };\r\n\r\n  const onMouseUp = (event) => {\r\n    if (drawingToolRef.current && drawingToolRef.current.onMouseUp) {\r\n      drawingToolRef.current.onMouseUp(event);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = fabricCanvasRef.current;\r\n\r\n    // Event handlers for mouse events\r\n    canvas.on('mouse:down', onMouseDown);\r\n    canvas.on('mouse:move', onMouseMove);\r\n    canvas.on('mouse:up', onMouseUp);\r\n\r\n    return () => {\r\n      // Remove the event listeners on unmount\r\n      canvas.off('mouse:down', onMouseDown);\r\n      canvas.off('mouse:move', onMouseMove);\r\n      canvas.off('mouse:up', onMouseUp);\r\n    };\r\n  }, []);\r\n\r\n  const setDrawingTool = (tool) => {\r\n    drawingToolRef.current = tool;\r\n  };\r\n\r\n  const enableFreeDrawing = () => {\r\n    const canvas = fabricCanvasRef.current;\r\n\r\n    canvas.isDrawingMode = true;\r\n    canvas.freeDrawingBrush.width = brushWidth;\r\n\r\n    if (isErasing) {\r\n      canvas.freeDrawingBrush.color = '#ffffff'; // Set the brush color to white for erasing effect\r\n      canvas.freeDrawingBrush.backgroundColor = '#ffffff'; // Set the background color to white for erasing effect\r\n      canvas.isDrawingMode = true; // Enable drawing mode for erasing\r\n    } else {\r\n      canvas.freeDrawingBrush.color = currentColor; // Set the brush color to the selected color for drawing\r\n      canvas.freeDrawingBrush.backgroundColor = 'transparent'; // Set the background color to transparent for drawing\r\n      canvas.isDrawingMode = true; // Enable drawing mode\r\n    }\r\n  };\r\n\r\n  const handleColorChange = (color) => {\r\n    setCurrentColor(color);\r\n    setIsErasing(false); // Disable eraser when a color is selected\r\n  };\r\n\r\n  const toggleEraser = () => {\r\n    setIsErasing((prev) => !prev);\r\n  };\r\n\r\n  const handleBrushWidthChange = (event) => {\r\n    const width = parseInt(event.target.value);\r\n    setBrushWidth(width);\r\n  };\r\n\r\n  const clearCanvas = () => {\r\n    const canvas = fabricCanvasRef.current;\r\n    const objects = canvas.getObjects();\r\n  \r\n    // Remove all foreground objects, leaving the background color intact\r\n    objects.forEach((object) => {\r\n      if (object !== canvas.backgroundImage) {\r\n        canvas.remove(object);\r\n      }\r\n    });\r\n\r\n    canvas.renderAll(); // Re-render the canvas after clearing\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            width: '500px',\r\n            height: '500px',\r\n            border: '1px solid #ccc',\r\n            /* Add any other desired styles for the canvas here */\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>선 색상:</label>\r\n        {colorPalette.map((color) => (\r\n          <button\r\n            key={color}\r\n            style={{ backgroundColor: color, width: '30px', height: '30px', margin: '5px' }}\r\n            onClick={() => handleColorChange(color)}\r\n          />\r\n        ))}\r\n        <MDBBtn\r\n          onClick={enableFreeDrawing}\r\n          id='form'\r\n          className='w-100 mb-4 btn custom-btn'\r\n          size='md'\r\n          style={{ fontSize: '18px' }}\r\n        >\r\n          그리기\r\n        </MDBBtn>\r\n\r\n        <label>선 굵기: </label>\r\n        <input\r\n          type=\"range\"\r\n          min=\"1\"\r\n          max=\"10\"\r\n          value={brushWidth}\r\n          onChange={handleBrushWidthChange}\r\n          style={{ width: '100px', margin: '5px' }}\r\n        />\r\n        <span>{brushWidth}</span>\r\n        <button onClick={clearCanvas}>전체 지우기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Drawboard;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SACEC,YADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,OAJF,EAKEC,aALF,EAMEC,WANF,EAOEC,OAPF,EAQEC,WARF,EASEC,MATF,QAUO,kBAVP;AAYA,OAAO,iBAAP;;AAEA,MAAMC,YAAY,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,SAAnE,EAA8E,SAA9E,CAArB;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAMC,SAAS,GAAGd,MAAM,CAAC,IAAD,CAAxB;EACA,MAAMe,eAAe,GAAGf,MAAM,CAAC,IAAD,CAA9B;EACA,MAAMgB,cAAc,GAAGhB,MAAM,CAAC,IAAD,CAA7B;EACA,MAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAACW,YAAY,CAAC,CAAD,CAAb,CAAhD;EACA,MAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,CAAD,CAA5C,CANsB,CAM2B;;EAEjDF,SAAS,CAAC,MAAM;IACd,MAAMwB,MAAM,GAAG,IAAIrB,MAAM,CAACsB,MAAX,CAAkBV,SAAS,CAACW,OAA5B,EAAqC;MAClDC,KAAK,EAAE,GAD2C;MAElDC,MAAM,EAAE,GAF0C;MAGlDC,eAAe,EAAE,SAHiC,CAGtB;;IAHsB,CAArC,CAAf;IAMAb,eAAe,CAACU,OAAhB,GAA0BF,MAA1B;IAEA,OAAO,MAAM;MACX;MACAA,MAAM,CAACM,OAAP;IACD,CAHD;EAID,CAbQ,EAaN,EAbM,CAAT;EAeA9B,SAAS,CAAC,MAAM;IACd;IACA,MAAMwB,MAAM,GAAGR,eAAe,CAACU,OAA/B;IACAF,MAAM,CAACO,gBAAP,CAAwBC,KAAxB,GAAgCZ,YAAhC;IACAI,MAAM,CAACO,gBAAP,CAAwBJ,KAAxB,GAAgCL,UAAhC;EACD,CALQ,EAKN,CAACF,YAAD,EAAeE,UAAf,CALM,CAAT;;EAOA,MAAMW,WAAW,GAAIC,KAAD,IAAW;IAC7B,IAAIjB,cAAc,CAACS,OAAf,IAA0BT,cAAc,CAACS,OAAf,CAAuBO,WAArD,EAAkE;MAChEhB,cAAc,CAACS,OAAf,CAAuBO,WAAvB,CAAmCC,KAAnC;IACD;EACF,CAJD;;EAMA,MAAMC,WAAW,GAAID,KAAD,IAAW;IAC7B,IAAIjB,cAAc,CAACS,OAAf,IAA0BT,cAAc,CAACS,OAAf,CAAuBS,WAArD,EAAkE;MAChElB,cAAc,CAACS,OAAf,CAAuBS,WAAvB,CAAmCD,KAAnC;IACD;EACF,CAJD;;EAMA,MAAME,SAAS,GAAIF,KAAD,IAAW;IAC3B,IAAIjB,cAAc,CAACS,OAAf,IAA0BT,cAAc,CAACS,OAAf,CAAuBU,SAArD,EAAgE;MAC9DnB,cAAc,CAACS,OAAf,CAAuBU,SAAvB,CAAiCF,KAAjC;IACD;EACF,CAJD;;EAMAlC,SAAS,CAAC,MAAM;IACd,MAAMwB,MAAM,GAAGR,eAAe,CAACU,OAA/B,CADc,CAGd;;IACAF,MAAM,CAACa,EAAP,CAAU,YAAV,EAAwBJ,WAAxB;IACAT,MAAM,CAACa,EAAP,CAAU,YAAV,EAAwBF,WAAxB;IACAX,MAAM,CAACa,EAAP,CAAU,UAAV,EAAsBD,SAAtB;IAEA,OAAO,MAAM;MACX;MACAZ,MAAM,CAACc,GAAP,CAAW,YAAX,EAAyBL,WAAzB;MACAT,MAAM,CAACc,GAAP,CAAW,YAAX,EAAyBH,WAAzB;MACAX,MAAM,CAACc,GAAP,CAAW,UAAX,EAAuBF,SAAvB;IACD,CALD;EAMD,CAdQ,EAcN,EAdM,CAAT;;EAgBA,MAAMG,cAAc,GAAIC,IAAD,IAAU;IAC/BvB,cAAc,CAACS,OAAf,GAAyBc,IAAzB;EACD,CAFD;;EAIA,MAAMC,iBAAiB,GAAG,MAAM;IAC9B,MAAMjB,MAAM,GAAGR,eAAe,CAACU,OAA/B;IAEAF,MAAM,CAACkB,aAAP,GAAuB,IAAvB;IACAlB,MAAM,CAACO,gBAAP,CAAwBJ,KAAxB,GAAgCL,UAAhC;;IAEA,IAAIJ,SAAJ,EAAe;MACbM,MAAM,CAACO,gBAAP,CAAwBC,KAAxB,GAAgC,SAAhC,CADa,CAC8B;;MAC3CR,MAAM,CAACO,gBAAP,CAAwBF,eAAxB,GAA0C,SAA1C,CAFa,CAEwC;;MACrDL,MAAM,CAACkB,aAAP,GAAuB,IAAvB,CAHa,CAGgB;IAC9B,CAJD,MAIO;MACLlB,MAAM,CAACO,gBAAP,CAAwBC,KAAxB,GAAgCZ,YAAhC,CADK,CACyC;;MAC9CI,MAAM,CAACO,gBAAP,CAAwBF,eAAxB,GAA0C,aAA1C,CAFK,CAEoD;;MACzDL,MAAM,CAACkB,aAAP,GAAuB,IAAvB,CAHK,CAGwB;IAC9B;EACF,CAfD;;EAiBA,MAAMC,iBAAiB,GAAIX,KAAD,IAAW;IACnCX,eAAe,CAACW,KAAD,CAAf;IACAb,YAAY,CAAC,KAAD,CAAZ,CAFmC,CAEd;EACtB,CAHD;;EAKA,MAAMyB,YAAY,GAAG,MAAM;IACzBzB,YAAY,CAAE0B,IAAD,IAAU,CAACA,IAAZ,CAAZ;EACD,CAFD;;EAIA,MAAMC,sBAAsB,GAAIZ,KAAD,IAAW;IACxC,MAAMP,KAAK,GAAGoB,QAAQ,CAACb,KAAK,CAACc,MAAN,CAAaC,KAAd,CAAtB;IACA1B,aAAa,CAACI,KAAD,CAAb;EACD,CAHD;;EAKA,MAAMuB,WAAW,GAAG,MAAM;IACxB,MAAM1B,MAAM,GAAGR,eAAe,CAACU,OAA/B;IACA,MAAMyB,OAAO,GAAG3B,MAAM,CAAC4B,UAAP,EAAhB,CAFwB,CAIxB;;IACAD,OAAO,CAACE,OAAR,CAAiBC,MAAD,IAAY;MAC1B,IAAIA,MAAM,KAAK9B,MAAM,CAAC+B,eAAtB,EAAuC;QACrC/B,MAAM,CAACgC,MAAP,CAAcF,MAAd;MACD;IACF,CAJD;IAMA9B,MAAM,CAACiC,SAAP,GAXwB,CAWJ;EACrB,CAZD;;EAeA,oBACE;IAAA,wBACE;MAAA,uBACE;QACE,GAAG,EAAE1C,SADP;QAEE,KAAK,EAAE;UACLY,KAAK,EAAE,OADF;UAELC,MAAM,EAAE,OAFH;UAGL8B,MAAM,EAAE;UACR;;QAJK;MAFT;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAYE;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,EAEG7C,YAAY,CAAC8C,GAAb,CAAkB3B,KAAD,iBAChB;QAEE,KAAK,EAAE;UAAEH,eAAe,EAAEG,KAAnB;UAA0BL,KAAK,EAAE,MAAjC;UAAyCC,MAAM,EAAE,MAAjD;UAAyDgC,MAAM,EAAE;QAAjE,CAFT;QAGE,OAAO,EAAE,MAAMjB,iBAAiB,CAACX,KAAD;MAHlC,GACOA,KADP;QAAA;QAAA;QAAA;MAAA,QADD,CAFH,eASE,QAAC,MAAD;QACE,OAAO,EAAES,iBADX;QAEE,EAAE,EAAC,MAFL;QAGE,SAAS,EAAC,2BAHZ;QAIE,IAAI,EAAC,IAJP;QAKE,KAAK,EAAE;UAAEoB,QAAQ,EAAE;QAAZ,CALT;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATF,eAmBE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAnBF,eAoBE;QACE,IAAI,EAAC,OADP;QAEE,GAAG,EAAC,GAFN;QAGE,GAAG,EAAC,IAHN;QAIE,KAAK,EAAEvC,UAJT;QAKE,QAAQ,EAAEwB,sBALZ;QAME,KAAK,EAAE;UAAEnB,KAAK,EAAE,OAAT;UAAkBiC,MAAM,EAAE;QAA1B;MANT;QAAA;QAAA;QAAA;MAAA,QApBF,eA4BE;QAAA,UAAOtC;MAAP;QAAA;QAAA;QAAA;MAAA,QA5BF,eA6BE;QAAQ,OAAO,EAAE4B,WAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QA7BF;IAAA;MAAA;MAAA;MAAA;IAAA,QAZF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA8CD,CAhKD;;GAAMpC,S;;KAAAA,S;AAkKN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}